# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get geoinfo
#' @description This function returns data from /v1.0/variables/{variableID}/variableelements/{resourceID}/geoinfo
#' @param variableID (string) Variable identificator.
#' @param resourceID (string) Resource identificator.
#' @param fields (string) Additional fields that you want to show in the answer.
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_structuralresources_geoinfo("VR_TERRITORIO", "CCAA_CANARIAS")
#' @export
get_structuralresources_geoinfo <- function(variableID, resourceID, fields = NULL, limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse fields
if (!is.null(fields)) {
fields <- parse_param(fields)
}
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <-  "structural-resources"
path <- "variables"
resource <- paste0(variableID, "/variableelements/", resourceID, "/geoinfo")
params <- paste0("?fields=", fields, "&limit=", limit, "&offset=", offset, "&query=", query, "&orderBy=", orderBy)
resource <- paste0(resource, params)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
get_structuralresources_geoinfo("VR_TERRITORIO", "MUN_ICOD_VINOS")
library(jsonlite)
get_structuralresources_geoinfo("VR_TERRITORIO", "MUN_ICOD_VINOS")
# Instituto Canario de EstadÃ­stica (ISTAC)
#' @title Get variable families
#' @description This function returns data from /v1.0/variablefamilies
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_structuralresources_variable_families()
#' @export
get_structuralresources_variable_families <- function(limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <-  "structural-resources"
path <- "variablefamilies"
params <- paste0("?limit=", limit, "&offset=", offset, "&query=", query, "&orderBy=", orderBy)
path <- paste0(path, params)
url <- get_url(api, path)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get variable families (id)
#' @description This function returns data from /v1.0/variablefamilies/{id}
#' @param id (string) Variable family identificator.
#' @examples
#' get_structuralresources_variable_families_id("VRF_DEMOGRAFICAS")
#' @export
get_structuralresources_variable_families_id <- function(id) {
# Build URL
api <-  "structural-resources"
path <- "variablefamilies"
resource <- id
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get variable families (id) variables
#' @description This function returns data from /v1.0/variablefamilies/{id}/variables
#' @param id (string) Variable family identificator.
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_structuralresources_variable_families_id_variables("VRF_DEMOGRAFICAS")
#' @export
get_structuralresources_variable_families_id_variables <- function(id, limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <-  "structural-resources"
path <- "variablefamilies"
resource <- paste0(id, "/variables")
params <- paste0("?limit=", limit, "&offset=", offset, "&query=", query, "&orderBy=", orderBy)
resource <- paste0(resource, params)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get variables
#' @description This function returns data from /v1.0/variables
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_structuralresources_variables()
#' @export
get_structuralresources_variables <- function(limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <-  "structural-resources"
path <- "variables"
url <- get_url(api, path)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get variables (id)
#' @description This function returns data from /v1.0/variables/{id}
#' @param id (string) Variable identificator.
#' @examples
#' get_structuralresources_variables_id("VR_SEXO")
#' @export
get_structuralresources_variables_id <- function(id) {
# Build URL
api <-  "structural-resources"
path <- "variables"
resource <- id
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get variableelements
#' @description This function returns data from /v1.0/variables/{variableID}/variableelements
#' @param variableID (string) Variable identificator.
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_structuralresources_variableelements("VR_SEXO")
#' @export
get_structuralresources_variableelements <- function(variableID, limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <-  "structural-resources"
path <- "variables"
resource <- paste0(variableID, "/variableelements")
params <- paste0("?limit=", limit, "&offset=", offset, "&query=", query, "&orderBy=", orderBy)
resource <- paste0(resource, params)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get variableelements resource
#' @description This function returns data from /v1.0/variables/{variableID}/variableelements/{resourceID}
#' @param resourceID (string) Resource identificator.
#' @param variableID (string) Variable identificator.
#' @examples
#' get_structuralresources_variableelements_resource("VR_SEXO", "FEMALE")
#' get_structuralresources_variableelements_resource("VR_TERRITORIO", "CCAA_CANARIAS")
#' @export
get_structuralresources_variableelements_resource <- function(variableID, resourceID) {
# Build URL
api <-  "structural-resources"
path <- "variables"
resource <- paste0(variableID, "/variableelements/", resourceID)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get geoinfo
#' @description This function returns data from /v1.0/variables/{variableID}/variableelements/{resourceID}/geoinfo
#' @param variableID (string) Variable identificator.
#' @param resourceID (string) Resource identificator.
#' @param fields (string) Additional fields that you want to show in the answer.
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_structuralresources_geoinfo("VR_TERRITORIO", "MUN_ICOD_VINOS")
#' @export
get_structuralresources_geoinfo <- function(variableID, resourceID, fields = NULL, limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse fields
if (!is.null(fields)) {
fields <- parse_param(fields)
}
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <-  "structural-resources"
path <- "variables"
resource <- paste0(variableID, "/variableelements/", resourceID, "/geoinfo")
params <- paste0("?fields=", fields, "&limit=", limit, "&offset=", offset, "&query=", query, "&orderBy=", orderBy)
resource <- paste0(resource, params)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
get_indicators_code_data("AFILIACIONES")
# Instituto Canario de EstadÃ­stica (ISTAC)
#' @title Get categorisations
#' @description This function returns the content from /v1.0/categorisations
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_categorisations()
#' get_categorisations(query = "ID EQ 2090", orderBy = "ID ASC")
#' @export
get_categorisations <- function(limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <- "structural-resources"
path <- "categorisations"
params <- paste0("?limit=", limit, "&offset=", offset, "&orderBy=", orderBy, "&query=", query)
path <- paste0(path, params)
url <- get_url(api, path)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get categorisations agency
#' @description This function returns the content from /v1.0/categorisations/{agencyID}
#' @param agencyID (string) Identifier of the agency that publishes.
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_categorisations_agency("ISTAC")
#' @export
get_categorisations_agency <- function(agencyID, limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <- "structural-resources"
path <- "categorisations"
resource <- agencyID
params <- paste0("?limit=", limit, "&offset=", offset, "&orderBy=", orderBy, "&query=", query)
resource <- paste0(resource, params)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get categorisations agency resource
#' @description This function returns the content from /v1.0/categorisations/{agencyID}/{resourceID}
#' @param agencyID (string) Identifier of the agency that publishes.
#' @param resourceID (string) Resource identifier.
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_categorisations_agency_resource("ISTAC", "cat2")
#' @export
get_categorisations_agency_resource <- function(agencyID, resourceID, limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <- "structural-resources"
path <- "categorisations"
resource <- paste0(agencyID, "/", resourceID)
params <- paste0("?limit=", limit, "&offset=", offset, "&orderBy=", orderBy, "&query=", query)
resource <- paste0(resource, params)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get categorisations agency resource version
#' @description This function returns the content from /v1.0/categorisations/{agencyID}/{resourceID}/{version}
#' @param agencyID (string) Identifier of the agency that publishes.
#' @param resourceID (string) Resource identifier.
#' @param version (string) Specific version of the resource.
#' @examples
#' get_categorisations_agency_resource_version("ISTAC", "cat2", "01.000")
#' @export
get_categorisations_agency_resource_version <- function(agencyID, resourceID, version) {
# Build URL
api <- "structural-resources"
path <- "categorisations"
resource <- paste0(agencyID, "/", resourceID, "/", version)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get category schemes
#' @description This function returns the content from /v1.0/categoryschemes
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_category_schemes()
#' get_category_schemes(query = "ID EQ 2090", orderBy = "ID ASC")
#' @export
get_category_schemes <- function(limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <- "structural-resources"
path <- "categoryschemes"
params <- paste0("?limit=", limit, "&offset=", offset, "&orderBy=", orderBy, "&query=", query)
path <- paste0(path, params)
url <- get_url(api, path)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get category schemes agency
#' @description This function returns the content from /v1.0/categoryschemes/{agencyID}
#' @param agencyID (string) Identifier of the agency that publishes.
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_category_schemes_agency("ISTAC", query = "ID EQ 2090", orderBy = "ID ASC")
#' @export
get_category_schemes_agency <- function(agencyID, limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <- "structural-resources"
path <- "categoryschemes"
resource <- agencyID
params <- paste0("?limit=", limit, "&offset=", offset, "&orderBy=", orderBy, "&query=", query)
resource <- paste0(resource, params)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get category schemes agency resource
#' @description This function returns the content from /v1.0/categoryschemes/{agencyID}/{resourceID}
#' @param agencyID (string) Identifier of the agency that publishes.
#' @param resourceID (string) Resource identifier.
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_category_schemes_agency_resource("ISTAC", "TEMAS_CANARIAS")
#' @export
get_category_schemes_agency_resource <- function(agencyID, resourceID, limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <- "structural-resources"
path <- "categoryschemes"
resource <- paste0(agencyID, "/", resourceID)
params <- paste0("?limit=", limit, "&offset=", offset, "&orderBy=", orderBy, "&query=", query)
resource <- paste0(resource, params)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get category schemes agency resource version
#' @description This function returns the content from /v1.0/categoryschemes/{agencyID}/{resourceID}/{version}
#' @param agencyID (string) Identifier of the agency that publishes.
#' @param resourceID (string) Resource identifier.
#' @param version (string) Specific version of the resource.
#' @examples
#' get_category_schemes_agency_resource_version("ISTAC", "TEMAS_CANARIAS", "01.000")
#' @export
get_category_schemes_agency_resource_version <- function(agencyID, resourceID, version) {
# Build URL
api <- "structural-resources"
path <- "categoryschemes"
resource <- paste0(agencyID, "/", resourceID, "/", version)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get category schemes agency resource version categories
#' @description This function returns the content from /v1.0/categoryschemes/{agencyID}/{resourceID}/{version}/categories
#' @param agencyID (string) Identifier of the agency that publishes.
#' @param resourceID (string) Resource identifier.
#' @param version (string) Specific version of the resource.
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_category_schemes_agency_resource_version_categories("ISTAC", "TEMAS_CANARIAS", "01.000")
#' @export
get_category_schemes_agency_resource_version_categories <- function(agencyID, resourceID, version, limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <- "structural-resources"
path <- "categoryschemes"
resource <- paste0(agencyID, "/", resourceID, "/", version, "/categories")
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get category schemes agency resource version categories (id)
#' @description This function returns the content from /v1.0/categoryschemes/{agencyID}/{resourceID}/{version}/categories/{categoryID}
#' @param agencyID (string) Identifier of the agency that publishes.
#' @param resourceID (string) Resource identifier.
#' @param version (string) Specific version of the resource.
#' @param categoryID (string)
#' @examples
#' get_category_schemes_agency_resource_version_categories_id("ISTAC", "TEMAS_CANARIAS", "01.000", "060")
#' get_category_schemes_agency_resource_version_categories_id("ISTAC", "TEMAS_CANARIAS", "01.000", "060.060_010.060_010_010")
#' @export
get_category_schemes_agency_resource_version_categories_id <- function(agencyID, resourceID, version, categoryID) {
# Build URL
api <- "structural-resources"
path <- "categoryschemes"
resource <- paste0(agencyID, "/", resourceID, "/", version, "/categories/", categoryID)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
