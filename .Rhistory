# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <-  "structural-resources"
path <- "variablefamilies"
params <- paste0("?limit=", limit, "&offset=", offset, "&query=", query, "&orderBy=", orderBy)
path <- paste0(path, params)
url <- get_url(api, path)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get variable families (id)
#' @description This function returns data from /v1.0/variablefamilies/{id}
#' @param id (string) Variable family identificator.
#' @examples
#' get_variable_families_id("VRF_DEMOGRAFICAS")
#' @export
get_variable_families_id <- function(id) {
# Build URL
api <-  "structural-resources"
path <- "variablefamilies"
resource <- id
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get variable families (id) variables
#' @description This function returns data from /v1.0/variablefamilies/{id}/variables
#' @param id (string) Variable family identificator.
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_variable_families_id_variables("VRF_DEMOGRAFICAS")
#' @export
get_variable_families_id_variables <- function(id, limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <-  "structural-resources"
path <- "variablefamilies"
resource <- paste0(id, "/variables")
params <- paste0("?limit=", limit, "&offset=", offset, "&query=", query, "&orderBy=", orderBy)
resource <- paste0(resource, params)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get variables
#' @description This function returns data from /v1.0/variables
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_variables()
#' @export
get_variables <- function(limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <-  "structural-resources"
path <- "variables"
url <- get_url(api, path)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get variables (id)
#' @description This function returns data from /v1.0/variables/{id}
#' @param id (string) Variable identificator.
#' @examples
#' get_variables_id("VR_SEXO")
#' @export
get_variables_id <- function(id) {
# Build URL
api <-  "structural-resources"
path <- "variables"
resource <- id
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get variableelements
#' @description This function returns data from /v1.0/variables/{variableID}/variableelements
#' @param variableID (string) Variable identificator.
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_variableelements("VR_SEXO")
#' @export
get_variableelements <- function(variableID, limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <-  "structural-resources"
path <- "variables"
resource <- paste0(variableID, "/variableelements")
params <- paste0("?limit=", limit, "&offset=", offset, "&query=", query, "&orderBy=", orderBy)
resource <- paste0(resource, params)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get variableelements resource
#' @description This function returns data from /v1.0/variables/{variableID}/variableelements/{resourceID}
#' @param resourceID (string) Resource identificator.
#' @param variableID (string) Variable identificator.
#' @examples
#' get_variableelements_resource("VR_SEXO", "FEMALE")
#' get_variableelements_resource("VR_TERRITORIO", "CCAA_CANARIAS")
#' @export
get_variableelements_resource <- function(variableID, resourceID) {
# Build URL
api <-  "structural-resources"
path <- "variables"
resource <- paste0(variableID, "/variableelements/", resourceID)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
#' @title Get geoinfo
#' @description This function returns data from /v1.0/variables/{variableID}/variableelements/{resourceID}/geoinfo
#' @param variableID (string) Variable identificator.
#' @param resourceID (string) Resource identificator.
#' @param fields (string) Additional fields that you want to show in the answer.
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param query (string) Query to filter the results.
#' @param orderBy (string) Field by which to sort the results.
#' @examples
#' get_geoinfo("VR_TERRITORIO", "CCAA_CANARIAS")
#' @export
get_geoinfo <- function(variableID, resourceID, fields = NULL, limit = 25, offset = 0, query = NULL, orderBy = NULL) {
# Parse fields
if (!is.null(fields)) {
fields <- parse_param(fields)
}
# Parse query
if (!is.null(query)) {
query <- parse_param(query)
}
# Parse orderBy
if (!is.null(orderBy)) {
orderBy <- parse_param(orderBy)
}
# Build URL
api <-  "structural-resources"
path <- "variables"
resource <- paste0(variableID, "/variableelements/", resourceID, "/geoinfo")
params <- paste0("?fields=", fields, "&limit=", limit, "&offset=", offset, "&query=", query, "&orderBy=", orderBy)
resource <- paste0(resource, params)
url <- get_url(api, path, resource)
# Get content
content <- fromJSON(url)
return(content)
}
library(istacr)
library(istacr)
library(istacr)
geoinfo <- istacr::get_geoinfo("VR_TERRITORIO", "CCAA_CANARIAS")
library(istacr)
geoinfo <- get_geoinfo("VR_TERRITORIO", "CCAA_CANARIAS")
View(geoinfo)
print(geoinfo)
library(istacr)
library(istacr)
geoinfo <- get_geoinfo("VR_TERRITORIO", "CCAA_CANARIAS")
print(geoinfo)
help(istacR)
?istacr
remove.packages("istacr", lib="~/R/R-3.5.1/library")
# Instituto Canario de EstadÃ­stica (ISTAC)
#' @title Get indicators
#' @description This function returns a list of indicators published in the
#'  ISTAC-indicators database. An indicator is a measure used to know the
#'  intensity of a phenomenon in spacetime. This measure can refer to
#'  different spatial or temporal granularities.
#' @param q (string) Metadata query on which the searches can be built using:
#'   \code{id}, \code{subjectCode} or \code{geographicValue}.
#' @param order (string) Order. Possible values are: \code{update} and
#'   \code{id} and order criteria are \code{ASC} and \code{DESC}.
#' @param limit (int) Results limit. By default \code{limit = 25}.
#' @param offset (int) Displacement. Result from which it is returned.  By default \code{offset = 0}.
#' @param fields (string) Use of the answer by adding new fields.
#'  Possible values are: \code{+metadata}, \code{+data} and \code{+observationsMetadata}.
#' @param representation (string) Allows filtering the observations by their value.
#'  Its use only makes sense when \code{+data} and/or \code{+observationsMetadata} has been included.
#' @examples
#' get_indicators()
#' get_indicators(q = 'subjectCode EQ 051')
#' get_indicators(q = 'id EQ "PARO_REGISTRADO"')
#' get_indicators(q = 'id IN ("AFILIACIONES", "EMPLEO_REGISTRADO_AGRICULTURA")')
#' get_indicators(q = 'id IN ("AFILIACIONES", "EMPLEO_REGISTRADO_AGRICULTURA")',
#'  order = "id ASC")
#' get_indicators(q = 'id IN ("AFILIACIONES", "EMPLEO_REGISTRADO_AGRICULTURA")',
#'  order = "id ASC", fields = "+metadata")
#' get_indicators(q = 'id IN ("AFILIACIONES", "EMPLEO_REGISTRADO_AGRICULTURA")',
#'  order = "id ASC", fields = "+data", representation =
#'  "GEOGRAPHICAL[35003|35005],MEASURE[ABSOLUTE]")
#' @export
get_indicators <- function(q = NULL, order = NULL, limit = 25, offset = 0, fields = NULL, representation = NULL) {
# URL params
api <- "indicators"
path <- "indicators"
# Parse order
if (!is.null(order)) {
order <- parse_param(order)
}
# Parse fields
if (!is.null(fields)) {
fields <- parse_param(fields)
}
# Parse representation
if (!is.null(representation)) {
representation <- parse_param(representation)
}
# Get indicators using query (q) parameter
if (!is.null(q)) {
q <- parse_param(q)
params <- paste0("&order=", order, "&limit=", limit, "&offset=", offset, "&fields=", fields, "&representation=", representation)
path <- paste0(path, "?q=", q, params)
} else {
params <- paste0("?order=", order, "&limit=", limit, "&offset=", offset, "&fields=", fields, "&representation=", representation)
path <- paste0(path, params)
}
url <- get_url(api, path)
content <- fromJSON(url)
return(content)
}
#' @title Get indicators code
#' @description This function returns the metadata that describe the characteristics
#'  of a specific indicator, allowing the compression of the measured fact;
#'  also through the data request the complete data (for all spacetime) of the
#'  indicator is provided.
#' @param indicatorCode (string) an indicator code
#' @examples
#' get_indicators_code("AFILIACIONES")
#' get_indicators_code("PARO_REGISTRADO")
#' @export
get_indicators_code <- function(indicatorCode) {
# URL params
api <- "indicators"
path <- "indicators"
url <- get_url(api, path, resource = indicatorCode)
content <- fromJSON(url)
return(content)
}
#' @title Get indicators code data
#' @description This function returns complete data (for all spacetime) of the indicator.
#'  On the other hand, metadata describing the characteristics of a specific
#'  indicator are offered through the metadata request, allowing the compression
#'  of the measured fact.
#' @param indicatorCode (string) an indicator code
#' @param representation (string) Allows filtering the observations by their value.
#' @param granularity (string) Allows to filter the observations through the granularities of the same.
#' @param fields (string) Allows you to customize the response by excluding fields.
#'  The possible values are: \code{-observationsMetadata}.
#' @examples
#' get_indicators_code_data("AFILIACIONES")
#' get_indicators_code_data("AFILIACIONES", representation =
#'  "GEOGRAPHICAL[35003|35005],MEASURE[ABSOLUTE]")
#' get_indicators_code_data("AFILIACIONES", granularity =
#'  "GEOGRAPHICAL[MUNICIPALITIES]")
#' get_indicators_code_data("AFILIACIONES", granularity =
#'  "GEOGRAPHICAL[MUNICIPALITIES]", fields = "-observationsMetadata")
#' @export
get_indicators_code_data <- function(indicatorCode, representation = NULL, granularity = NULL, fields = NULL) {
# Parse representation
if (!is.null(representation)) {
representation <- parse_param(representation)
}
# Parse granularity
if (!is.null(granularity)) {
granularity <- parse_param(granularity)
}
# Parse fields
if (!is.null(fields)) {
fields <- parse_param(fields)
}
# Build URL
api <- "indicators"
path <- "indicators"
resource <- paste0(indicatorCode, "/data", "?representation=", representation, "&granularity=", granularity, "&fields=", fields)
url <- get_url(api, path, resource = resource)
# Get content
content <- fromJSON(url)
return(content)
}
install.packages("ps")
R.Version()
library(istacr)
?istacr::get_indicators
install.packages("styler")
install.packages("lintr")
library(istacr)
library(istacr)
?Sys.sleep
geoinfo <- get_structuralresources_geoinfo("VR_TERRITORIO", "MUN_ICOD_VINOS")
library(istacr)
geoinfo <- get_structuralresources_geoinfo("VR_TERRITORIO", "MUN_ICOD_VINOS")
get_indicators(q = 'id IN ("AFILIACIONES", "EMPLEO_REGISTRADO_AGRICULTURA")', order = "id ASC", fields = "+data", representation ="GEOGRAPHICAL[35003|35005],MEASURE[ABSOLUTE]")
get_indicators()
get_indicators(q = 'id IN ("AFILIACIONES", "EMPLEO_REGISTRADO_AGRICULTURA")', order = "id ASC", fields = "+data", representation ="GEOGRAPHICAL[35003|35005],MEASURE[ABSOLUTE]")
library(istacr)
library(INEbaseR)
library(istacr)
library(istacr)
View(get_datasets())
View(get_datasets()$dataset)
View((get_datasets()$dataset)[[5]][[1]])
View((get_datasets()$dataset)[[5]][[2]])
ds <- get_datasets()$dataset
ds[[1]]$name
View(ds$name)
View(ds$name[[1]])
View(ds$name$text[[1]])
library(istacr)
get_datasets()
get_datasets()
library(istacr)
get_datasets()
View(get_datasets())
View(get_datasets()$dataset)
View(get_datasets_agency(agencyID = "ISTAC"))
View(get_datasets_agency(agencyID = "ISTAC")$dataset)
library(istacr)
tmp <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000")
tmp2 <- get_datasets()
library(istacr)
tmp <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000")
tmp <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000")
library(istacr)
library(istacr)
tmp <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000")
tmp <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000")
library(istacr)
tmp <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000")
tmp2 <- get_datasets()
View(tmp)
get_datasets()
library(istacr)
get_datasets()
library(istacr)
get_datasets()
get_datasets_agency(agencyID = "ISTAC")
library(istacr)
get_datasets_agency(agencyID = "ISTAC")
library(istacr)
get_datasets_agency(agencyID = "ISTAC")
library(istacr)
get_datasets_agency(agencyID = "ISTAC")
library(istacr)
get_datasets_agency(agencyID = "ISTAC")
library(istacr)
Sphinx
??Sphinx
?Sphinx
??sphinx
install.packages("usethis")
install.packages("knitr")
install.packages("pkgdown")
devtools::install_github("r-lib/pkgdown")
pkgdown::build_site()
install.packages("crayon")
library(crayon)
cat(blue("Hello", "world!\n"))
print(yellow("Hey"))
cat(yellow("Hey"))
cat(green("Hey"))
cat(red("Hey"))
datasets <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000")
library(istacr)
datasets <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000")
benchmark <- TRUE
# Start the clock (data)
if (benchmark) {
rnorm(100000)
rep(NA, 100000)
ptm <- proc.time()
}
datasets <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000")
# Start the clock (polygons)
if (benchmark) {
rnorm(100000)
rep(NA, 100000)
ptm <- proc.time()
}
benchmark <- TRUE
# Start the clock (data)
rnorm(100000)
rep(NA, 100000)
ptm <- proc.time()
datasets <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000")
# Start the clock (polygons)
rnorm(100000)
rep(NA, 100000)
ptm <- proc.time()
print(ptm)
benchmark <- TRUE
# Start the clock (data)
if (benchmark) {
rnorm(100000)
rep(NA, 100000)
ptm <- proc.time()
}
datasets <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000")
# Start the clock (polygons)
if (benchmark) {
rnorm(100000)
rep(NA, 100000)
ptm <- proc.time()
}
print(ptm)
benchmark <- TRUE
# Start the clock (data)
if (benchmark) {
rnorm(100000)
rep(NA, 100000)
ptm <- proc.time()
}
datasets <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000")
# Start the clock (polygons)
if (benchmark) {
time <- (proc.time() - ptm)[[3]]
message(paste0("Time elapsed (polygons): ", time, " (s)"))
}
library(istacr)
tmp <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000", fields = "-data, -metadata")
library(istacr)
get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000", fields = "-data, -metadata")
tmp <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000", fields = "-data, -metadata")
tmp <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000", fields = "-data,-metadata")
get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00010A_000002", version = "001.000", fields = "-data,-metadata")
library(istacr)
library(istacr)
get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00016A_000001", version = "~latest")
tmp <- get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00016A_000001", version = "~latest")
View(tmp)
tmp$name
get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00016A_000001", version = "~latest")
View(tmp[["data"]][["observations"]])
istacr::get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00016A_000001", version = "~latest")
library(istacr)
remove.packages("istacr", lib="~/R/win-library/3.6")
install.packages("istacr")
library(istacr)
tmp <- istacr::get_datasets_agency_resource_version(agencyID = "ISTAC", resourceID = "C00016A_000001", version = "~latest")
View(tmp)
library(askpass)
detach("package:askpass", unload = TRUE)
install.packages("roxygen2")
install.packages("jsonlite")
install.packages("curl")
library(knitr)
library(istacr)
library("istacr")
remove.packages("istacr", lib)
install.packages("C:/Proyectos/istacr_0.1.2.tar.gz", repos = NULL, type = "source", lib="C:/Program Files/R/R-3.6.3/library")
library(istacr)
get_datasets()
message('Caught an error!')
install.packages("C:/Proyectos/istacr_0.1.2.tar.gz", repos = NULL, type = "source", lib="C:/Program Files/R/R-3.6.3/library")
library(istacr)
get_indicators_geographic_granularities()
install.packages("C:/Proyectos/istacr_0.1.2.tar.gz", repos = NULL, type = "source", lib="C:/Program Files/R/R-3.6.3/library")
library(istacr)
get_datasets()
library(istacr)
?istacr::get_indicators
indicators <- get_indicators(
q = 'id IN ("AFILIACIONES", "EMPLEO_REGISTRADO_AGRICULTURA")',
order = "id ASC", fields = "+data", representation =
"GEOGRAPHICAL[35003|35005],MEASURE[ABSOLUTE]"
)
library(istacr)
indicators <- get_indicators(
q = 'id IN ("AFILIACIONES", "EMPLEO_REGISTRADO_AGRICULTURA")',
order = "id ASC", fields = "+data", representation =
"GEOGRAPHICAL[35003|35005],MEASURE[ABSOLUTE]"
)
indicators
library(istacr)
